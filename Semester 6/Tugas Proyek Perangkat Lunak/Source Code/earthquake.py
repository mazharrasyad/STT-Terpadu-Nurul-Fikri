# -*- coding: utf-8 -*-
"""Earthquake2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iPEX1qZehk6eVkCc34fR6sOepS1Tsxo-
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""## Abstract Factory method dan inisiasi data yang digunakan"""

class abstractData: 
    def show_data(self): pass
    
    def delete_data(self) :pass

class earthquake_data(abstractData):
    __shared_state = dict() 
  
    # constructor method 
    def __init__(self, tableData): 
  
        self.__dict__ = self.__shared_state 
        self.tableData = tableData
  
    def show_data(self):
        return self.tableData
    
    def delete_data(self):
        self.tableData = {}
        print("Data is gone")

read_data = pd.read_csv("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.csv")
earthquake = earthquake_data(read_data)

# earthquake2.delete_data()
earthquake_show = earthquake.show_data()
earthquake_show

earthquake_show.plot(x="longitude", y="latitude", c="mag", kind="scatter", figsize=(10,6));

"""## Builder pattern untuk membuat plotting data"""

class plotting:
    def make_plot(self): pass
    
    def add_plot_data(self): pass
    
    def set_plot(self): pass
    
    def show_plot(self): pass

class scatter_plot(plotting):
    def __init__(self, data):
        self.data = data
        self.make_plot()
        self.add_plot_data()
        self.set_data()
        
    def make_plot(self):
        self.fig, self.ax = plt.subplots(figsize=(20,10))
        
    def add_plot_data(self):
        self.scatter =  self.ax.scatter(x=self.data["longitude"],
                                        y=self.data["latitude"],
                                        c=self.data["mag"],
                                        cmap="Reds")
        
    def set_data(self):
        self.ax.set(title="Longitude, latitude, and mag",
               xlabel="longitude",
               ylabel="latitude");

        self.ax.legend(*self.scatter.legend_elements(), title="magnitude");
        
    def show_plot(self):
        return self.fig

scatter = scatter_plot(earthquake_show)

earthquake_show.head()

class histogram_plot(plotting):
    def __init__(self, data):
        self.data = data
        self.make_plot()
        self.add_plot_data()
        self.set_data()
        self.show_plot()
        
    def make_plot(self):
        self.fig, self.ax = plt.subplots(figsize=(10,8))
        
    def add_plot_data(self):
        self.hist =  self.ax.hist(self.data["mag"])
        
    def set_data(self):
        self.ax.set(title="Magnitude gempa",
                    xlabel="magnitude",
                    ylabel="frekuensi kemunculan");
        
    def show_plot(self):
        return self.fig

histogram = histogram_plot(earthquake_show)

earthquake_100 = earthquake_show.head(100)
earthquake_100

class plot(plotting):
    def __init__(self, data):
        self.data = data
        self.make_plot()
        self.add_plot_data()
        self.set_data()
        
    def make_plot(self):
        self.fig, self.ax = plt.subplots(figsize=(30,6))
        
    def add_plot_data(self):
        self.plot =  self.ax.plot(self.data["time"], self.data["mag"],)
        
    def set_data(self):
        self.ax.set(title="Earthquake Time and Magnitude",
                    xlabel="Time",
                    ylabel="Magnitude");

        plt.draw()
        self.ax.set_xticklabels(self.ax.get_xticklabels(), rotation=45);
        self.ax.axhline(earthquake_100["mag"].mean());
        
    def show_plot(self):
        return self.fig

plot100 = plot(earthquake_100)

class scatter_plot2(plotting):
    def __init__(self, data):
        self.data = data
        self.make_plot()
        self.add_plot_data()
        self.set_data()
        
    def make_plot(self):
        self.fig, self.ax = plt.subplots(figsize=(30,6))
        
    def add_plot_data(self):
        self.scatter =  self.ax.scatter(x=self.data["place"],
                                        y=self.data["depth"],
                                        c=self.data["mag"],
                                        cmap="winter")
        
    def set_data(self):
        self.ax.set(title="Earthquake and Depth",
                    xlabel="Place",
                    ylabel="Depth")
        
        plt.draw()
        self.ax.set_xticklabels(self.ax.get_xticklabels(), rotation=45)

        self.ax.set_ylim([-5,150])
        self.ax.legend(*self.scatter.legend_elements(), title="magnitude");
        
        self.ax.axhline(earthquake_100["depth"].mean(),
           linestyle="--",
           color='r');
        
    def show_plot(self):
        return self.fig

scatter2 = scatter_plot2(earthquake_100)

"""## Chain of responbility, digunakan untuk mencari grafik yang sesuai dengan permintaan user"""

class AbstractHandler(object): 
  
    """Parent class of all concrete handlers"""
  
    def __init__(self, nxt): 
  
        """change or increase the local variable using nxt"""
  
        self._nxt = nxt 
  
    def handle(self, request): 
  
        """It calls the processRequest through given request"""
  
        handled = self.processRequest(request) 
  
        """case when it is not handled"""
  
        if not handled: 
            self._nxt.handle(request) 
  
    def processRequest(self, request): 
  
        """throws a NotImplementedError"""
  
        raise NotImplementedError('First implement it !') 
  
  
class FirstConcreteHandler(AbstractHandler): 
  
    """Concrete Handler # 1: Child class of AbstractHandler""" 
    def processRequest(self, request): 
        if request == 'scatter': 
            return scatter_plot(earthquake_show)

  
  
class SecondConcreteHandler(AbstractHandler): 
  
    """Concrete Handler # 2: Child class of AbstractHandler"""
  
    def processRequest(self, request): 
        if request == "histogram": 
            return histogram_plot(earthquake_show)
        
  
class ThirdConcreteHandler(AbstractHandler): 
  
    """Concrete Handler # 3: Child class of AbstractHandler"""  
    def processRequest(self, request): 
        if request == 'plot': 
            return plot(earthquake_100)


class FourthConcreteHandler(AbstractHandler): 
  
    """Concrete Handler # 3: Child class of AbstractHandler"""
  
    def processRequest(self, request): 
        if request == 'scatter2': 
            return scatter_plot2(earthquake_100)

  
  
class DefaultHandler(AbstractHandler): 
  
    """Default Handler: child class from AbstractHandler"""
  
    def processRequest(self, request): 
  
        """Gives the message that th request is not handled and returns true"""
  
        print("This is {} telling you that request '{}' has no handler right now.".format(self.__class__.__name__, 
                                                                                          request)) 
        return True
  
  
class User: 
  
    """User Class"""
  
    def __init__(self): 
  
        """Provides the sequence of handles for the users"""
  
        initial = None
  
        self.handler = FirstConcreteHandler(SecondConcreteHandler(ThirdConcreteHandler(FourthConcreteHandler(DefaultHandler(initial))))) 
  
    def agent(self, user_request): 
  
        """Iterates over each request and sends them to specific handles"""
  
#         for request in user_request: 
        self.handler.handle(user_request) 
  
"""main method"""
  
if __name__ == "__main__": 
  
    """Create a client object"""
    user = User() 
  
    """Create requests to be processed"""
  
    string = "plot"
#     requests = list(string) 
  
    """Send the requests one by one, to handlers as per the sequence of handlers defined in the Client class"""
    user.agent(string)

"""## Proxy agar user tidak mengakses langsung class yang akan digunakan"""

class earthquake_proxy: 
    '''Relatively less resource-intensive proxy acting as middleman. 
     Instantiates a College object only if there is no fee due.'''
  
    def __init__(self):
        self.data = None
  
    def add_data(self, data):
        self.earthquake = earthquake_data(data)
    
    def show_data(self): 
        return self.earthquake.show_data()
    
    def delete_data(self):
        self.earthquake.delete_data()
    
    def show_plot(self, plot):
        self.user = User()
        self.user.agent(plot)

#  Instantiate the Proxy 
proxy = earthquake_proxy()

#Add Data
data = pd.read_csv("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.csv")
proxy.add_data(data)

#Show Data
proxy.show_data().head()

#show plot
proxy.show_plot("scatter")

#delete data
proxy.delete_data()
proxy.show_data()

proxy.add_data = pd.read_csv("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.csv")

proxy.show_plot("histogram")